{"version":3,"file":"static/js/8.da1eb7b3.chunk.js","mappings":"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","sources":["utils/firebase-config.jsx","views/layouts/panel/layout.jsx","views/pages/project-canvas.jsx"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB3giGXUMCjHRk0XEILfrER2C1Y0CW4f7g\",\n  authDomain: \"crud-generator-1d538.firebaseapp.com\",\n  projectId: \"crud-generator-1d538\",\n  storageBucket: \"crud-generator-1d538.appspot.com\",\n  messagingSenderId: \"488917621676\",\n  appId: \"1:488917621676:web:f2033cb973d031fdcdb809\"\n};\n\n// Initialize Firebase\nconst firebaseConf = initializeApp(firebaseConfig);\n\nexport default firebaseConf;\n// Now you can use Firebase services in your React app!","export default function PanelLayout(props) {\n    return (\n        <div>\n      <div class=\"page\">\n        <aside class=\"navbar navbar-vertical navbar-expand-lg\" data-bs-theme=\"dark\">\n          <div class=\"container-fluid\">\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#sidebar-menu\"\n              aria-controls=\"sidebar-menu\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <h1 class=\"navbar-brand navbar-brand-autodark\">\n              <a href=\".\">\n                <img src=\"./static/logo.svg\" width=\"110\" height=\"32\" alt=\"Tabler\" class=\"navbar-brand-image\" />\n              </a>\n            </h1>\n            <div class=\"navbar-nav flex-row d-lg-none\">\n              <div class=\"nav-item d-none d-lg-flex me-3\">\n                <div class=\"btn-list\">\n                  <a href=\"https://github.com/tabler/tabler\" class=\"btn\" target=\"_blank\" rel=\"noreferrer\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\"\n                      viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                      stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                      <path\n                        d=\"M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5\" />\n                    </svg>\n                    Source code\n                  </a>\n                  <a href=\"https://github.com/sponsors/codecalm\" class=\"btn\" target=\"_blank\" rel=\"noreferrer\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-pink\" width=\"24\" height=\"24\"\n                      viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                      stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                      <path\n                        d=\"M19.5 12.572l-7.5 7.428l-7.5 -7.428a5 5 0 1 1 7.5 -6.566a5 5 0 1 1 7.5 6.572\" />\n                    </svg>\n                    Sponsor\n                  </a>\n                </div>\n              </div>\n              <div class=\"d-none d-lg-flex\">\n                <a href=\"?theme=dark\" class=\"nav-link px-0 hide-theme-dark\" title=\"Enable dark mode\"\n                  data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\"\n                    viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                    stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path\n                      d=\"M12 3c.132 0 .263 0 .393 0a7.5 7.5 0 0 0 7.92 12.446a9 9 0 1 1 -8.313 -12.454z\" />\n                  </svg>\n                </a>\n                <a href=\"?theme=light\" class=\"nav-link px-0 hide-theme-light\" title=\"Enable light mode\"\n                  data-bs-toggle=\"tooltip\" data-bs-placement=\"bottom\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\"\n                    viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                    stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                    <path d=\"M12 12m-4 0a4 4 0 1 0 8 0a4 4 0 1 0 -8 0\" />\n                    <path\n                      d=\"M3 12h1m8 -9v1m8 8h1m-9 8v1m-6.4 -15.4l.7 .7m12.1 -.7l-.7 .7m0 11.4l.7 .7m-12.1 -.7l-.7 .7\" />\n                  </svg>\n                </a>\n                <div class=\"nav-item dropdown d-none d-md-flex me-3\">\n                  <a href=\"#\" class=\"nav-link px-0\" data-bs-toggle=\"dropdown\" tabindex=\"-1\"\n                    aria-label=\"Show notifications\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\"\n                      viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                      stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                      <path\n                        d=\"M10 5a2 2 0 1 1 4 0a7 7 0 0 1 4 6v3a4 4 0 0 0 2 3h-16a4 4 0 0 0 2 -3v-3a7 7 0 0 1 4 -6\" />\n                      <path d=\"M9 17v1a3 3 0 0 0 6 0v-1\" />\n                    </svg>\n                    <span class=\"badge bg-red\"></span>\n                  </a>\n                  <div class=\"dropdown-menu dropdown-menu-arrow dropdown-menu-end dropdown-menu-card\">\n                    <div class=\"card\">\n                      <div class=\"card-header\">\n                        <h3 class=\"card-title\">Last updates</h3>\n                      </div>\n                      <div class=\"list-group list-group-flush list-group-hoverable\">\n                        <div class=\"list-group-item\">\n                          <div class=\"row align-items-center\">\n                            <div class=\"col-auto\"><span\n                              class=\"status-dot status-dot-animated bg-red d-block\"></span>\n                            </div>\n                            <div class=\"col text-truncate\">\n                              <a href=\"#\" class=\"text-body d-block\">Example 1</a>\n                              <div class=\"d-block text-muted text-truncate mt-n1\">\n                                Change deprecated html tags to text decoration classes (#29604)\n                              </div>\n                            </div>\n                            <div class=\"col-auto\">\n                              <a href=\"#\" class=\"list-group-item-actions\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-muted\"\n                                  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\"\n                                  stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\">\n                                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                                  <path\n                                    d=\"M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z\" />\n                                </svg>\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"list-group-item\">\n                          <div class=\"row align-items-center\">\n                            <div class=\"col-auto\"><span class=\"status-dot d-block\"></span></div>\n                            <div class=\"col text-truncate\">\n                              <a href=\"#\" class=\"text-body d-block\">Example 2</a>\n                              <div class=\"d-block text-muted text-truncate mt-n1\">\n                                justify-content:between ⇒ justify-content:space-between (#29734)\n                              </div>\n                            </div>\n                            <div class=\"col-auto\">\n                              <a href=\"#\" class=\"list-group-item-actions show\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-yellow\"\n                                  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\"\n                                  stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\">\n                                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                                  <path\n                                    d=\"M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z\" />\n                                </svg>\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"list-group-item\">\n                          <div class=\"row align-items-center\">\n                            <div class=\"col-auto\"><span class=\"status-dot d-block\"></span></div>\n                            <div class=\"col text-truncate\">\n                              <a href=\"#\" class=\"text-body d-block\">Example 3</a>\n                              <div class=\"d-block text-muted text-truncate mt-n1\">\n                                Update change-version.js (#29736)\n                              </div>\n                            </div>\n                            <div class=\"col-auto\">\n                              <a href=\"#\" class=\"list-group-item-actions\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-muted\"\n                                  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\"\n                                  stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\">\n                                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                                  <path\n                                    d=\"M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z\" />\n                                </svg>\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                        <div class=\"list-group-item\">\n                          <div class=\"row align-items-center\">\n                            <div class=\"col-auto\"><span\n                              class=\"status-dot status-dot-animated bg-green d-block\"></span>\n                            </div>\n                            <div class=\"col text-truncate\">\n                              <a href=\"#\" class=\"text-body d-block\">Example 4</a>\n                              <div class=\"d-block text-muted text-truncate mt-n1\">\n                                Regenerate package-lock.json (#29730)\n                              </div>\n                            </div>\n                            <div class=\"col-auto\">\n                              <a href=\"#\" class=\"list-group-item-actions\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon text-muted\"\n                                  width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" stroke-width=\"2\"\n                                  stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\"\n                                  stroke-linejoin=\"round\">\n                                  <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                                  <path\n                                    d=\"M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z\" />\n                                </svg>\n                              </a>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"nav-item dropdown\">\n                <a href=\"#\" class=\"nav-link d-flex lh-1 text-reset p-0\" data-bs-toggle=\"dropdown\"\n                  aria-label=\"Open user menu\">\n                  <span class=\"avatar avatar-sm\"\n                    style={{}}></span>\n                  <div class=\"d-none d-xl-block ps-2\">\n                    <div>Paweł Kuna</div>\n                    <div class=\"mt-1 small text-muted\">UI Designer</div>\n                  </div>\n                </a>\n                <div class=\"dropdown-menu dropdown-menu-end dropdown-menu-arrow\">\n                  <a href=\"#\" class=\"dropdown-item\">Status</a>\n                  <a href=\"./profile.html\" class=\"dropdown-item\">Profile</a>\n                  <a href=\"#\" class=\"dropdown-item\">Feedback</a>\n                  <div class=\"dropdown-divider\"></div>\n                  <a href=\"./settings.html\" class=\"dropdown-item\">Settings</a>\n                  <a href=\"./sign-in.html\" class=\"dropdown-item\">Logout</a>\n                </div>\n              </div>\n            </div>\n            <div class=\"collapse navbar-collapse\" id=\"sidebar-menu\">\n              <ul class=\"navbar-nav pt-lg-3\">\n                <li class=\"nav-item mt-4 ms-3 mb-4\">\n                  <a class=\"btn btn-lg btn-light rounded-pill fw-bold\" href=\"/project-canvas\">\n                    <i class=\"bi bi-plus-lg force-bi-bold-1 me-2\"></i>\n                    Create\n                  </a>\n                </li>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\" href=\"/dashboard\">\n                    <span\n                      class=\"nav-link-icon d-md-none d-lg-inline-block\">\n                      <i class=\"bi bi-columns-gap\"></i>\n                      {/* <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\"\n                        viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                        stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                        <path d=\"M5 12l-2 0l9 -9l9 9l-2 0\" />\n                        <path d=\"M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7\" />\n                        <path d=\"M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6\" />\n                      </svg> */}\n                    </span>\n                    <span class=\"nav-link-title\">\n                      Dashboard\n                    </span>\n                  </a>\n                </li>\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\" href=\"/project-canvas\">\n                    <span\n                      class=\"nav-link-icon d-md-none d-lg-inline-block\">\n                      <i class=\"bi bi-file-earmark-code\"></i>\n                    </span>\n                    <span class=\"nav-link-title\">\n                      Project\n                    </span>\n                  </a>\n                </li>\n                <li class=\"nav-item dropdown\">\n                  <a class=\"nav-link dropdown-toggle\" href=\"#navbar-extra\" data-bs-toggle=\"dropdown\"\n                    data-bs-auto-close=\"false\" role=\"button\" aria-expanded=\"false\">\n                    <span\n                      class=\"nav-link-icon d-md-none d-lg-inline-block\">\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon\" width=\"24\" height=\"24\"\n                        viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\"\n                        stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                        <path\n                          d=\"M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z\" />\n                      </svg>\n                    </span>\n                    <span class=\"nav-link-title\">\n                      Extra\n                    </span>\n                  </a>\n                  <div class=\"dropdown-menu\">\n                    <div class=\"dropdown-menu-columns\">\n                      <div class=\"dropdown-menu-column\">\n                        <a class=\"dropdown-item\" href=\"./empty.html\">\n                          Project 1\n                        </a>\n                        <a class=\"dropdown-item\" href=\"./empty.html\">\n                          Project 2\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </aside>\n\n        {props.children}\n\n      </div>\n    </div>\n    )\n}","import React, { Component } from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport ReactDOM from \"react-dom\";\nimport ReactDOMServer from \"react-dom/server\";\nimport SampleProjectCanvasTemplateJson from '../../sample-project-canvas.json';\nimport { collection, addDoc, updateDoc, getDocs, getFirestore, query, where, db, doc, documentId } from \"firebase/firestore\";\nimport firebaseConf from '../../utils/firebase-config';\nimport * as bootstrap from '../../../node_modules/bootstrap/dist/js/bootstrap.bundle.js';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport PanelLayout from \"../layouts/panel/layout\";\n\nclass ProjectCanvas extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            errorMessage: null,\n            isLoadingGeneratedResults: false,\n            loadingGeneratedResults: null,\n            results: [],\n            projectCanvas: {\n                createProjectFrom: null\n            },\n            blueprintFormHtmlString: \"\"\n        }\n        this.handleImportProjectTemplate = this.handleImportProjectTemplate.bind(this)\n        this.handleStartCanvas = this.handleStartCanvas.bind(this)\n    }\n\n    renderCanvasFromState() {\n        if (this.state.projectCanvas['platform'] === undefined) {\n            return;\n        }\n\n        let blueprints = this.state.projectCanvas.blueprintForm\n        let totalRow = blueprints.length\n\n        function generateX(elm) {\n            // GENERATE DYNAMIC ATTRIBUTES\n            let dynamicAttributes = {}\n            for (const key in elm.attributes) {\n                if (elm.attributes.hasOwnProperty(key)) {\n                    if ((typeof elm.attributes[key]) != \"boolean\") {\n                        dynamicAttributes[key] = elm.attributes[key]\n                    } else {\n                        if (elm.attributes[key]) {\n                            dynamicAttributes[key] = elm.attributes[key]\n                        }\n                    }\n                }\n            }\n            // GENERATE DYNAMIC ATTRIBUTES\n\n            if (elm.tag == 'select') {\n                return <select {...dynamicAttributes}>\n                    {elm.options.map(opt => {\n                        return <option >{opt.label}</option>\n                    })}\n                </select>\n            }\n\n            if (elm.tag == 'input') {\n                return <input {...dynamicAttributes} />\n            }\n\n            if (elm.tag == 'textarea') {\n                return <textarea {...dynamicAttributes}></textarea>\n            }\n        }\n\n        return <div className=\"card\">\n            <div className=\"card-header\">\n                <div className=\"card-title\">Preview Form</div>\n            </div>\n            <div className=\"card-body\">\n                {blueprints.map(blp => {\n                    let explodingToColumn = Math.round(12 / totalRow)\n\n                    return <div className=\"row pseudo-row\">\n                        <div className=\"pseudo-row-button\" style={{ display: 'none' }}>\n                            <button className=\"btn btn-sm btn-primary\">Tambah</button>\n                            <button className=\"btn btn-sm btn-info\">Edit</button>\n                            <button className=\"btn btn-sm btn-danger\">Hapus</button>\n                        </div>\n\n                        <br /><br />\n                        {\n                            blp.map(elm => {\n                                return <div className={`form-group ${blp.length > 1 ? '' : 'pseudo-row'} ${blp.length > 1 ? 'col-md-' + explodingToColumn : ''} mb-3`}>\n                                    <label className=\"mb-1\" for={`${elm.attributes.id}`}>{elm.label}</label>\n                                    {generateX(elm)}\n                                </div>\n                            })}\n\n                    </div>\n                })}\n                {/* <div className=\"row pseudo-row\">\n                    <div className=\"pseudo-row-button\" style={{ display: 'none' }}>\n                        <button className=\"btn btn-sm btn-primary\">Tambah</button> \n                        <button className=\"btn btn-sm btn-info\">Edit</button>\n                         <button className=\"btn btn-sm btn-danger\">Hapus</button>\n                    </div> \n                    \n                    <br/><br/>\n                    {elements.map(elm => {\n                        return <div className={ `form-group ${elements.length > 1 ? '' : 'pseudo-row'} ${elements.length > 1 ? 'col-md-' + explodingToColumn : ''} mb-3` }>\n                            <label className=\"mb-1\" for={`${elm.attributes.id}`}>{elm.label}</label>\n                            {generateX(elm)}\n                        </div>\n                    })}\n                </div> */}\n            </div>\n            <div className=\"card-footer\">\n                <div className=\"card-title\">Preview Tree</div>\n                <div>\n                    <ul id=\"myUL\">\n                        {blueprints.map((blp, index) => {\n                            return <li><span class=\"caret\">{`Row ${index + 1}`}</span>\n                                <ul class=\"nested\">\n                                    {blp.map(elm => {\n                                        return <li>{elm.attributes.name}</li>\n                                    })}\n                                </ul>\n                            </li>\n                        })}\n\n                    </ul>\n                </div>\n            </div>\n        </div>\n    }\n\n    generatePureHtmlFromState() {\n        if (this.state.projectCanvas['platform'] === undefined) {\n            return;\n        }\n\n        if (this.state.projectCanvas.crudType === 'api') {\n            return;\n        }\n\n        let blueprints = this.state.projectCanvas.blueprintForm\n        let inputs = blueprints.flat()\n        let totalRow = blueprints.length\n\n        function generateX(elm) {\n            // GENERATE DYNAMIC ATTRIBUTES\n            let dynamicAttributes = {}\n            for (const key in elm.attributes) {\n                if (elm.attributes.hasOwnProperty(key)) {\n                    if ((typeof elm.attributes[key]) != \"boolean\") {\n                        dynamicAttributes[key] = elm.attributes[key]\n                    } else {\n                        if (elm.attributes[key]) {\n                            dynamicAttributes[key] = elm.attributes[key]\n                        }\n                    }\n                }\n            }\n            // GENERATE DYNAMIC ATTRIBUTES\n\n            if (elm.tag == 'select') {\n                return <select {...dynamicAttributes}>\n                    {elm.options.map(opt => {\n                        return <option >{opt.label}</option>\n                    })}\n                </select>\n            }\n\n            if (elm.tag == 'input') {\n                return <input {...dynamicAttributes} />\n            }\n\n            if (elm.tag == 'textarea') {\n                return <textarea {...dynamicAttributes}></textarea>\n            }\n        }\n\n        const generateModal = (type) => {\n            let headerTitle = type == 'create' ? 'Tambah' : 'Ubah'\n            let footerTitle = type == 'create' ? 'Tambahkan' : 'Ubah'\n            let buttonStyle = type == 'create' ? 'btn btn-primary' : 'btn btn-warning'\n\n            return <div className=\"modal fade\" id={`modal-${type}`} tabindex=\"-1\" aria-labelledby={`${type}-modal-label`} aria-hidden=\"true\">\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <form id={`form-${type}`}>\n                            <div className=\"modal-header\">\n                                <h1 className=\"modal-title fs-5\" id={`${type}-modal-label`}>{headerTitle} data</h1>\n                                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Tutup\"></button>\n                            </div>\n                            <div className=\"modal-body\">\n                                {blueprints.map(blp => {\n                                    let explodingToColumn = Math.round(12 / totalRow)\n\n                                    return <div className=\"row\">{blp.map(elm => {\n                                        return <div className={`form-group${blp.length > 1 ? ' col-md-' + explodingToColumn + ' ' : ' '}mb-3`}>\n                                            <label className=\"mb-1\" for={elm.attributes.id}>{elm.label}</label>\n                                            {generateX(elm)}\n                                            <div id={`${elm.attributes.id}-msg`}></div>\n                                        </div>\n                                    })}</div>\n                                })}\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Batal</button>\n                                <button type=\"submit\" className={buttonStyle}>{footerTitle}</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        }\n\n        const generateIndexPage = () => {\n            let finalResult = ''\n\n            const generateTable = () => {\n\n                let generateColumn = () => {\n                    let result = ''\n                    inputs.map(input => {\n                        let orderable = ''\n                        if (input.attributes.type === 'number' || input.attributes.type === 'date') {\n                            orderable = 'data-orderable=\"true\"'\n                        } else {\n                            orderable = ''\n                        }\n                        result += `<th ${orderable}>{{ __('${input.attributes.name}') }}</th>`\n                    })\n\n                    return result\n                }\n\n                return `\n                    <div class=\"table-responsive\">\n                        <table id=\"table\" class=\"table table-striped\">\n                            <thead>\n                                <tr>\n                                    <th width=\"10%\">{{ __('No') }}</th>\n                                    ${generateColumn()}\n                                </tr>\n                            </thead>\n                            <tbody></tbody>\n                        </table>\n                    </div>\n                `\n            }\n\n            finalResult = generateTable()\n\n            return finalResult\n        }\n\n        const generateScript = () => {\n            let finalResult = ''\n\n            finalResult = `<script>\n                let formMode = 'create'\n            `\n\n            const datatable = () => {\n                let finalResult = ''\n\n                let generateColumn = () => {\n                    let result = ''\n                    inputs.map(input => {\n                        result += `{\n                                data: '${input.attributes.name}',\n                                name: '${input.attributes.name}'\n                            },`\n                    })\n\n                    return result\n                }\n\n                finalResult = `\n                    let table = $('#table').DataTable({\n                        processing: true,\n                        serverSide: true,\n                        responsive: true,\n                        ajax: \"{{ url()->current() }}\",\n                        lengthMenu: [10, 25, 50],\n                        columns: [{\n                                data: 'DT_RowIndex',\n                                name: 'DT_RowIndex'\n                            },\n                            ${generateColumn()}\n                            {\n                                data: 'actions',\n                                name: 'actions',\n                                orderable: false,\n                                searchable: false\n                            },\n                        ]\n                    })\n                `\n\n                return finalResult\n            }\n\n            const updateData = () => {\n                return `\n                    $('#table tbody').on('click', '.btn-update', function() {\n                        let id = $(this).data('id')\n                        let detail = $(this).data('detail')\n\n                        formMode = 'update'\n\n                        for (const key in detail) {\n                            if (detail.hasOwnProperty(key)) {\n                                $(\\`#update-\\${key}\\`).val(detail[key])\n                            }\n                        }\n                        $(\\`#modal-\\${formMode}\\`).modal('show')\n                    })\n                `\n            }\n\n            const createData = () => {\n                return `\n                    $('#form-create').submit(function(e) {\n                        e.preventDefault()\n\n                        let formData = new FormData(this)\n                        formData.append('_method', 'post')\n                        formData.append('_token', getCsrfToken())\n\n                        callApi(formData)\n                    })\n                `\n            }\n\n            const deleteData = () => {\n                return `\n                    $('#form-update').submit(function(e) {\n                        e.preventDefault()\n\n                        // fill id here...\n                        let id = $('#update-...').val()\n\n                        let formData = new FormData(this)\n                        formData.append('_method', 'put')\n                        formData.append('_token', getCsrfToken())\n\n                        callApi(formData, \\`{{ url()->current() }}/\\${id}\\`)\n                    })\n\n                    $('#table tbody').on('click', '.btn-delete', function() {\n                        let id = $(this).data('id')\n\n                        showSwalConfirm(\\`Hapus\\`, 'Hapus data?', 'warning', function(result) {\n                            if (result) {\n                                let formData = new FormData()\n                                formData.append('_method', 'delete')\n                                formData.append('_token', getCsrfToken())\n\n                                callApi(formData, \"{{ url()->current() }}\" + \"/\" + id)\n                            }\n                        })\n                    })\n                `\n            }\n\n            const callApi = () => {\n                return `\n                    function callApi(formData, url = null) {\n                        $.ajax({\n                            url: url == null ? \"{{ url()->current() }}\" : url,\n                            method: \"POST\",\n                            data: formData,\n                            dataType: \"JSON\",\n                            cache: false,\n                            contentType: false,\n                            processData: false,\n                            beforeSend: function() {\n                                clearValidationMessage(formMode, 'msg')\n                            },\n                            success: function(response) {\n                                $(\\`#form-\\${formMode}\\`).trigger('reset')\n                                $(\\`#modal-\\${formMode}\\`).modal('hide')\n                                formMode = 'create'\n                                showSwal(response.message, response.status)\n                                table.ajax.reload()\n                            },\n                            error: function(response) {\n                                if (response.status == 422) {\n                                    let error = response.responseJSON.errors\n                                    clearValidationMessage(formMode, 'msg')\n                                    validationMessageRender(error, formMode, 'msg')\n                                    return\n                                }\n\n                                showSwal(response.responseJSON.message, response.responseJSON.status)\n                            }\n                        })\n                    }\n                `\n            }\n\n            finalResult += datatable() + updateData() + deleteData() + callApi()\n\n            finalResult += `</script>`\n\n            return finalResult\n        }\n\n        let modalHtmlString = ReactDOMServer.renderToString(generateModal('create'))\n        modalHtmlString += ReactDOMServer.renderToString(generateModal('update'))\n        this.setState({ blueprintFormHtmlString: modalHtmlString })\n        this.setState((prevState, props) => ({\n            results: [...prevState.results, {\n                fileName: 'modal.blade.php',\n                description: '',\n                code: modalHtmlString,\n                language: 'html'\n            }]\n        }))\n\n        let indexHtmlString = generateIndexPage() + generateScript()\n        this.setState((prevState, props) => ({\n            results: [...prevState.results, {\n                fileName: 'index.blade.php',\n                description: '',\n                code: indexHtmlString,\n                language: 'html'\n            }]\n        }))\n    }\n\n    generateLogicFromState() {\n        if (this.state.projectCanvas['platform'] === undefined) {\n            return;\n        }\n\n        function generateDatatables(inputs) {\n            let finalResult\n\n            finalResult = `\n            // Get data here\n            $data = YourModel::all();\n\n            return DataTables::of($data)\n                ->addIndexColumn()\n                ->addColumn('actions', function ($row) {\n                    $btn = '';\n\n                    $btn .= '<a href=\"javascript:void(0)\" class=\"btn btn-outline-warning btn-sm btn-update me-1\" data-detail=\"' . htmlspecialchars($row) . '\"  data-id=' . $row->id . '><i class=\"bi bi-pencil-square\"></i> Edit</a>';\n\n                    $btn .= '<a href=\"javascript:void(0)\" class=\"btn btn-outline-danger btn-sm btn-delete\" data-id=' . $row->id . '><i class=\"bi bi-trash-fill\"></i> Delete</a>';\n\n                    return $btn;\n                })\n                ->rawColumns(['actions'])\n                ->make(true);\n            `\n\n            return finalResult\n        }\n\n        function generateValidation(inputs) {\n            let finalResult\n            let fieldAssignRules = `$validator = Validator::make($request->all(), [`\n\n            inputs.map(input => {\n                fieldAssignRules += `\\n    '${input.attributes.name}' => '${input.validation.rules}'`\n            })\n\n            fieldAssignRules += `\\n ]);`\n\n            let returnBackValidationFail = `\n            if ($validator->fails()) {\n                return response()->json([\n                    'status'    => 'error',\n                    'message'   => 'Ooopps',\n                    'errors'    => $validator->errors()\n                ], 422);\n            }\n            `\n\n            finalResult = fieldAssignRules + returnBackValidationFail\n\n            return finalResult\n        }\n\n        const generateIndex = () => {\n            let finalResult = ``\n\n            if (this.state.projectCanvas.crudType === 'api') {\n                finalResult += `\n                return return response()->json([\n                    'status'    => 'success',\n                    'message'   => 'Berhasil menampilkan data',\n                    'data'      => YourModel::paginate(10)\n                ], 200);\n                `\n            } else if (this.state.projectCanvas.crudType === 'modal') {\n                finalResult += `\n                if ($request->ajax()) {\n                    ${generateDatatables(this.state.projectCanvas.blueprintForm.flat())}\n                }\n\n                $data['title'] = $this->title;\n                $data['subtitle'] = $this->subtitle;\n\n                return view('admin.master.${this.state.projectCanvas.titleProject.toLowerCase()}.index', $data);\n                `\n            }\n\n            return finalResult\n        }\n\n        function generateCreateData(inputs) {\n            let finalResult = ``\n\n            let uploadFile = (inputs) => {\n                let result = ``\n\n                inputs.map(input => {\n                    if (input.attributes.type === 'file' && input.storePath !== null) {\n                        result += `\\n $validator['${input.attributes.name}'] = $request->file('${input.attributes.name}')->store('${input.storePath}');`\n                    }\n                })\n\n                return result\n            }\n\n\n            finalResult += `try {\n                $validator = $request->all();\n                \n                ${uploadFile(inputs)}\n                \n                // Inserting data....\n                YourModel::create($validator);\n                \n                // Create logging here....\n                Helper::insertLog(\"Menambahkan data $this->title\");\n\n                return response()->json([\n                    'status'    => 'success',\n                    'message'   => 'Berhasil menambah data',\n                    'data'      => null\n                ], 201);\n                \n            } catch (Exception $e) {\n                return response()->json([\n                    'status'    => 'error',\n                    'message'   => 'Gagal menambah data, ' . $e->getMessage(),\n                    'data'      => null\n                ], 500);\n            }\n`\n\n            return finalResult\n        }\n\n        function hasFile(inputs) {\n            let hasFileExist = false\n\n            inputs.map(input => {\n                if (input.attributes.type === 'file' && input.storePath !== null) {\n                    hasFileExist = true\n                }\n            })\n\n            return hasFileExist\n        }\n\n        function generateUpdateData(inputs) {\n            let finalResult = ``\n\n            let uploadFile = (inputs) => {\n                let result = ``\n\n                inputs.map(input => {\n                    if (input.attributes.type === 'file' && input.storePath !== null) {\n                        result += `\\n $validator['${input.attributes.name}'] = $request->file('${input.attributes.name}')->store('${input.storePath}');`\n                    }\n                })\n\n                return result\n            }\n\n            let deleteFile = (inputs) => {\n                let result = ``\n\n                inputs.map(input => {\n                    if (input.attributes.type === 'file' && input.storePath !== null) {\n                        result += `Storage::delete($old_data->${input.attributes.name});`\n                    }\n                })\n\n                return result\n            }\n\n            finalResult += `try {\n                $validator = $request->all();\n\n                // getting old data\n                $old_data = YourModel::find($id);\n\n                // update data here....\n                YourModel::find($id)->update($validator);\n\n                // update file...\n                ${uploadFile(inputs)}\n\n                // delete old file\n                ${deleteFile(inputs)}\n\n                // update log...\n                Helper::insertLog(\"Mengubah data $this->title\");\n\n                return response()->json([\n                    'status'    => 'success',\n                    'message'   => 'Berhasil mengubah data',\n                    'data'      => null\n                ], 200);\n            } catch (Exception $e) {\n                return response()->json([\n                    'status'    => 'error',\n                    'message'   => 'Gagal mengubah data, ' . $e->getMessage(),\n                    'data'      => null\n                ], 500);\n            }`\n\n            return finalResult\n        }\n\n        // header class\n        let mainLogic =\n            `<?php\n\n        /*\n            This code is generated by crud-generator.beta.dimasnugroho673.github.io\n            @https://github.com/dimasnugroho673\n            \n            This generator using beta version, still check and test your code before paste to production\n        */\n\n        namespace App\\\\Http\\\\Controllers\\\\Master;\n\n        use Exception;\n        use App\\\\Helpers\\\\Helper;\n        use Illuminate\\\\Http\\\\Request;\n        use App\\\\Http\\\\Controllers\\\\Controller;\n        ${hasFile(this.state.projectCanvas.blueprintForm.flat()) ? 'use Illuminate\\\\Support\\\\Facades\\\\Storage;' : ''}\n        use Yajra\\\\DataTables\\\\DataTables;\n        use Illuminate\\\\Support\\\\Facades\\\\Validator;\n        use App\\\\Models\\\\YourModel;\n\n        // insert your dependency namespace here....\n\n        class ${this.state.projectCanvas.titleProject}Controller extends Controller {\n\n            private $title = \"${this.state.projectCanvas.titleProject}\";\n            private $subtitle = \"Master ${this.state.projectCanvas.titleProject}\";\n\n            public function index(Request $request) { \n               ${generateIndex()}\n            }\n\n            public function store(Request $request) {\n                ${generateValidation(this.state.projectCanvas.blueprintForm.flat())}   \n\n                ${generateCreateData(this.state.projectCanvas.blueprintForm.flat())}\n            }\n\n            public function update(Request $request, $id) {\n                ${generateValidation(this.state.projectCanvas.blueprintForm.flat())}\n\n                ${generateUpdateData(this.state.projectCanvas.blueprintForm.flat())}\n            }\n\n            public function destroy($id) {\n                try {\n                    // getting old data\n                    $old_data = YourModel::find($id);\n\n                    // delete data here....\n                    YourModel::destroy($id);\n\n                    // delete unneccessary file...\n                    // Storage::delete(path....);\n\n                    // update log...\n                    Helper::insertLog(\"Menghapus data $this->title\");\n\n                    return response()->json([\n                        'status'    => 'success',\n                        'message'   => 'Berhasil menghapus data',\n                        'data'      => null\n                    ], 200);\n                } catch (Exception $e) {\n                    return response()->json([\n                        'status'    => 'error',\n                        'message'   => 'Gagal menghapus data, ' . $e->getMessage(),\n                        'data'      => null\n                    ], 500);\n                }\n            }\n        }`\n\n        // finalResults.push(mainLogic)\n        this.setState((prevState, props) => ({\n            results: [...prevState.results, {\n                fileName: this.generateFilename(this.state.projectCanvas.platform, 'controller'),\n                description: '',\n                code: mainLogic,\n                language: 'php'\n            }]\n        }))\n        // return <textarea className=\"form-control\" rows={10} cols={30}>{mainLogic}</textarea>\n        // finalResults.map(separated => {\n        //     return <textarea className=\"form-control\" rows={10} cols={30}>{separated}</textarea>\n        // })\n    }\n\n    // generateViewFromState() {\n    //     return <div>\n    //         <div className=\"mb-3\">\n    //             <label htmlFor=\"\">modal.blade.php</label>\n    //             <textarea className=\"form-control\" rows={10} cols={30}>{this.state.blueprintFormHtmlString}</textarea>\n    //         </div>\n    //     </div>\n    // }\n\n    componentDidMount() {\n        // this.renderCanvasFromState()\n        // generateCanvas()\n\n        this.setState({ loadingGeneratedResults: this.fragmentMakeMeAwesome() })\n    }\n\n    handleImportProjectTemplate(type, e) {\n        console.log(e)\n    }\n\n    async sendDatAnalytic() {\n        // try {\n        //     const database = getFirestore(firebaseConf)\n        //     const addHistory = await addDoc(collection(database, \"histories\"), {\n        //         templateVersion: this.state.projectCanvas.templateVersion,\n        //         titleProject: this.state.projectCanvas.titleProject,\n        //         platform: this.state.projectCanvas.platform,\n        //         crudType: this.state.projectCanvas.crudType,\n        //         createProjectFrom: this.state.projectCanvas.createProjectFrom,\n        //         createdAt: new Date(),\n        //         updatedAt: new Date()\n        //     })\n        //     // console.log(\"Document written with ID: \", addHistory.id)\n\n        //     await getDocs(query(collection(database, \"histories_per_platform\"), where(documentId(), \"==\", this.state.projectCanvas.platform)))\n        //         .then((snapshot) => {\n        //             if (snapshot.docs.length >= 1) {\n        //                 let data = snapshot.docs[0].data()\n        //                 data.historiesDocId.push(addHistory.id)\n\n        //                 updateDoc(doc(database, \"histories_per_platform\", this.state.projectCanvas.platform), {\n        //                     count: data.count + 1,\n        //                     historiesDocId: data.historiesDocId\n        //                 })\n        //             }\n        //         })\n\n        //     // const addHistoryPerPlatform = await updateDoc(doc(database, \"histories_per_platform\", this.state.projectCanvas.platform), { \n        //     //     count: Subject \n        //     // })\n\n        //     // const addHistoryPerPlatform = await addDoc(collection(database, \"histories_per_platform\"), {\n        //     //     templateVersion: this.state.projectCanvas.templateVersion,\n        //     //     titleProject: this.state.projectCanvas.titleProject,\n        //     //     platform: this.state.projectCanvas.platform,\n        //     //     crudType: this.state.projectCanvas.crudType,\n        //     //     createProjectFrom: this.state.projectCanvas.createProjectFrom,\n        //     //     createdAt: new Date(),\n        //     //     updatedAt: new Date()\n        //     // })\n        //     // console.log(\"Document written with ID: \", addHistoryPerPlatform.id)\n\n\n        // } catch (e) {\n        //     console.error(\"Error adding document: \", e)\n        // }\n    }\n\n    handleStartCanvas(e) {\n\n        this.setState({ isLoadingGeneratedResults: true })\n\n        let sourceTemplate\n        if (this.state.projectCanvas.createProjectFrom === 'import_text') {\n            this.setState({ loadingGeneratedResults: this.fragmentGeneratingResult('Validating JSON...') })\n\n            setTimeout(() => {\n                try {\n                    sourceTemplate = document.querySelector('#create-import_text').value\n\n                    sourceTemplate = JSON.parse(sourceTemplate)\n                    sourceTemplate['createProjectFrom'] = 'import_text'\n\n                    setTimeout(() => {\n                        this.setState({ projectCanvas: sourceTemplate }, () => {\n                            this.generatePureHtmlFromState()\n                            this.generateLogicFromState()\n                            this.sendDatAnalytic()\n                        })\n                    }, 2000)\n                } catch (error) {\n                    alert('Validating JSON failed: ' + error.message)\n                } finally {\n                    document.querySelector('#modal-create-project .btn-close').click()\n\n                    this.setState({ isLoadingGeneratedResults: false })\n                    this.setState({ loadingGeneratedResults: this.fragmentMakeMeAwesome() })\n                }\n            }, 500)\n\n        } else if (this.state.projectCanvas.createProjectFrom === 'import_file') {\n            sourceTemplate = document.getElementById(\"create-import_file\").files[0]\n\n            this.setState({ loadingGeneratedResults: this.fragmentGeneratingResult('Validating JSON...') })\n\n            if (sourceTemplate) {\n                setTimeout(() => {\n                    let reader = new FileReader()\n\n                    reader.readAsText(sourceTemplate, \"UTF-8\")\n                    reader.onload = (e) => {\n                        sourceTemplate = JSON.parse(e.target.result)\n                        sourceTemplate['createProjectFrom'] = 'import_file'\n\n                        this.setState({ projectCanvas: sourceTemplate }, () => {\n                            this.generatePureHtmlFromState()\n                            this.generateLogicFromState()\n                            this.sendDatAnalytic()\n                        })\n\n                        this.setState({ isLoadingGeneratedResults: false })\n\n                        document.querySelector('#modal-create-project .btn-close').click()\n                    }\n                    reader.onerror = (e) => {\n                        console.error('error read file json: ', e.target.result)\n                        // document.getElementById(\"fileContents\").innerHTML = \"error reading file\";\n                    }\n                }, 2000)\n            }\n        }\n    }\n\n    handleEndCanvas() {\n        const confirmEnd = window.confirm('Are you sure to delete this canvas?')\n\n        if (confirmEnd) {\n            this.resetCanvas()\n            alert('Canvas has been deleted!')\n        }\n\n        return\n    }\n\n    resetCanvas() {\n        this.setState({\n            errorMessage: null,\n            isLoadingGeneratedResults: false,\n            loadingGeneratedResults: this.fragmentMakeMeAwesome(),\n            results: [],\n            projectCanvas: {\n                createProjectFrom: null\n            },\n            blueprintFormHtmlString: \"\"\n        })\n\n        document.getElementById('form-create_project').reset()\n    }\n\n    // copy button\n    copyCode = (code) => {\n        const copy = () => {\n            const textField = document.createElement('textarea');\n            textField.innerText = code;\n            document.body.appendChild(textField);\n            textField.select();\n            document.execCommand('copy');\n            textField.remove();\n\n            // Alert the copied text\n            alert(\"Success copy code\");\n        }\n\n        return <div>\n            <button className=\"btn btn-sm btn-primary px-2 py-1\" onClick={e => copy()}><i class=\"bi bi-copy me-1\"></i> Copy</button>\n        </div>\n    }\n\n    // final results\n    renderFinalResults() {\n        return this.state.results.map(piece => {\n            return <div className=\"form-group mb-3\">\n                <label htmlFor=\"\">{piece.fileName}</label>\n                <SyntaxHighlighter language={piece.language} style={solarizedlight} showLineNumbers>\n                    {piece.code}\n                </SyntaxHighlighter>\n                {this.copyCode(piece.code)}\n            </div>\n            // return <div className=\"form-group mb-3\">\n            //     <label htmlFor=\"\">{piece.fileName}</label>\n            //     <textarea className=\"form-control\" rows={10} cols={30}>{piece.code}</textarea>\n            //     <button className=\"btn btn-sm btn-primary mt-2\">Download file</button>\n            // </div>\n        })\n    }\n\n    // small func\n    generateFilename(platform, typePattern) { // typePattern like controlller, view, model, service, etc....\n        if (platform === 'php-laravel8_9') {\n            if (typePattern === 'controller') {\n                return this.state.projectCanvas.titleProject + 'Controller.php'\n            }\n\n            if (typePattern === 'view') {\n\n            }\n        }\n\n    }\n\n    fragmentMakeMeAwesome() {\n        return <div><i class=\"bi bi-stars me-2\"></i> Make me awesome</div>\n    }\n\n    fragmentGeneratingResult(text) {\n        return <div>{text}</div>\n    }\n\n    render() {\n        return (\n            <PanelLayout>\n                <div className=\"page-wrapper\">\n                    <div className=\"page-header d-print-none\">\n                        <div className=\"container-xl\">\n                            <div className=\"row g-2 align-items-center\">\n                                <div className=\"col\">\n\n                                    <div className=\"page-pretitle\">\n                                        Project\n                                    </div>\n                                    <h2 className=\"page-title\">\n                                        Canvas\n                                    </h2>\n                                </div>\n\n                                <div className=\"col-auto ms-auto d-print-none\">\n                                    <div className=\"btn-list\">\n                                        <a href=\"#\" className={`btn btn-primary d-none d-sm-inline-block ${this.state.results.length >= 1 ? 'disabled' : ''}`} data-bs-toggle=\"modal\"\n                                            data-bs-target=\"#modal-create-project\">\n                                            {this.state.results.length >= 1 ? 'End canvas to create new project' : <>\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon\" width=\"24\" height=\"24\"\n                                                    viewBox=\"0 0 24 24\" strokeWidth={\"2\"} stroke=\"currentColor\" fill=\"none\"\n                                                    strokeLinecap={\"round\"} strokeLinejoin={\"round\"}>\n                                                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                                                    <path d=\"M12 5l0 14\" />\n                                                    <path d=\"M5 12l14 0\" />\n                                                </svg> Create project\n                                            </>\n                                            }\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"page-body\">\n                        <div className=\"container-xl\">\n                            <div className=\"row row-deck row-cards\">\n                                <div class=\"alert alert-warning\" role=\"alert\">\n                                    This project now beta version and only support for CRUD master data.  Consider to use this tools for boosting workflow development, and still recheck manually result generated code.\n                                </div>\n\n                                <div id=\"fragment-preview\"></div>\n\n\n\n                                {this.state.isLoadingGeneratedResults && <div class=\"text-center\">\n                                    <div class=\"spinner-border\" role=\"status\">\n                                        <span class=\"visually-hidden\">Loading...</span>\n                                    </div>\n                                    <h5 className=\"mt-1\">Generating code...</h5>\n                                </div>\n                                }\n\n                                {this.state.projectCanvas['platform'] !== undefined &&\n                                    <div>\n                                        {this.renderCanvasFromState()}\n\n                                        <div className=\"mt-5\"></div>\n                                        <br /><br /><br /><br /><br />\n                                        <hr />\n\n                                        {/* <h3>Main Logic</h3> */}\n                                        {/* {this.generateLogicFromState()} */}\n\n                                        {/* <h3>View</h3> */}\n                                        {/* {this.generateViewFromState()} */}\n                                        {/* <textarea name=\"asd\" id=\"asd\" className=\"form-control\" value={this.state.blueprintFormHtmlString} rows={10} cols={30}></textarea> */}\n\n                                        <h3>Final result {`(${this.state.results.length} file)`}</h3>\n\n                                        <div class=\"alert alert-warning\" role=\"alert\">\n                                            Generated code isn't pretty, please prettier your code manually\n                                        </div>\n\n                                        {this.renderFinalResults()}\n                                    </div>\n                                }\n\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* <footer className=\"footer footer-transparent d-print-none\">\n          <div className=\"container-xl\">\n            <div className=\"row text-center align-items-center flex-row-reverse\">\n              <div className=\"col-12 col-lg-auto mt-3 mt-lg-0\">\n                <ul className=\"list-inline list-inline-dots mb-0\">\n                  <li className=\"list-inline-item\">\n                    Copyright &copy; 2023\n                    <a href=\".\" className=\"link-secondary\">Tabler</a>.\n                    All rights reserved.\n                  </li>\n                  <li className=\"list-inline-item\">\n                    <a href=\"./changelog.html\" className=\"link-secondary\" rel=\"noopener\">\n                      v1.0.0-beta19\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </footer> */}\n\n                    <div className=\"modal modal-blur fade\" id=\"modal-create-project\" tabIndex={\"-1\"} role=\"dialog\" aria-hidden=\"true\">\n                        <div className=\"modal-dialog modal-lg\" role=\"document\">\n                            <div className=\"modal-content\">\n                                <form id=\"form-create_project\">\n                                    <div className=\"modal-header\">\n                                        <h5 className=\"modal-title\">Create project</h5>\n                                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                                    </div>\n                                    <div className=\"modal-body\">\n                                        <label className=\"form-label\">Start with...</label>\n                                        <div className=\"form-selectgroup-boxes row mb-3\">\n                                            <div className=\"col-lg-6\">\n                                                <label className=\"form-selectgroup-item\" onClick={(e) => this.setState({ projectCanvas: { ...this.state.projectCanvas, createProjectFrom: 'ui_wizard' } })}>\n                                                    <input type=\"radio\" name=\"report-type\" value=\"1\" className=\"form-selectgroup-input\" />\n                                                    <span className=\"form-selectgroup-label d-flex align-items-center p-3\">\n                                                        <span className=\"me-3\">\n                                                            <span className=\"form-selectgroup-check\"></span>\n                                                        </span>\n                                                        <span className=\"form-selectgroup-label-content\">\n                                                            <span className=\"form-selectgroup-title strong mb-1\">Simple</span>\n                                                            <span className=\"d-block text-muted\">Create form and page using UI</span>\n                                                        </span>\n                                                    </span>\n                                                </label>\n                                            </div>\n                                            <div className=\"col-lg-6\">\n                                                <label className=\"form-selectgroup-item\" onClick={(e) => this.setState({ projectCanvas: { ...this.state.projectCanvas, createProjectFrom: 'import_file' } })}>\n                                                    <input type=\"radio\" name=\"report-type\" value=\"1\" className=\"form-selectgroup-input\" />\n                                                    <span className=\"form-selectgroup-label d-flex align-items-center p-3\">\n                                                        <span className=\"me-3\">\n                                                            <span className=\"form-selectgroup-check\"></span>\n                                                        </span>\n                                                        <span className=\"form-selectgroup-label-content\">\n                                                            <span className=\"form-selectgroup-title strong mb-1\">Advanced (file)</span>\n                                                            <span className=\"d-block text-muted\">Create form and page using JSON File template</span>\n                                                        </span>\n                                                    </span>\n                                                </label>\n                                            </div>\n                                            <div className=\"col-lg-6\">\n                                                <label className=\"form-selectgroup-item\" onClick={(e) => this.setState({ projectCanvas: { ...this.state.projectCanvas, createProjectFrom: 'import_text' } })}>\n                                                    <input type=\"radio\" name=\"report-type\" value=\"1\" className=\"form-selectgroup-input\" />\n                                                    <span className=\"form-selectgroup-label d-flex align-items-center p-3\">\n                                                        <span className=\"me-3\">\n                                                            <span className=\"form-selectgroup-check\"></span>\n                                                        </span>\n                                                        <span className=\"form-selectgroup-label-content\">\n                                                            <span className=\"form-selectgroup-title strong mb-1\">Advanced (text)</span>\n                                                            <span className=\"d-block text-muted\">Create form and page using JSON text template</span>\n                                                        </span>\n                                                    </span>\n                                                </label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div className=\"modal-body\">\n                                        <div className=\"row\">\n                                            {this.state.projectCanvas.createProjectFrom === 'import_text' && (\n\n                                                <div className=\"col-lg-12\">\n                                                    <a className=\"btn btn-outline-info mb-3\" href={SampleProjectCanvasTemplateJson} download=\"sample-project-canvas-template-json.json\"><i class=\"bi bi-filetype-json me-2\"></i> Download sample data JSON</a>\n\n                                                    <div>\n                                                        <label className=\"form-label\">Paste your JSON template here</label>\n                                                        <textarea id=\"create-import_text\" className=\"form-control\" rows=\"3\"></textarea>\n                                                    </div>\n                                                </div>\n                                            )}\n\n                                            {this.state.projectCanvas.createProjectFrom === 'import_file' && (\n                                                <div className=\"col-lg-12\">\n                                                    <div>\n                                                        <label className=\"form-label\">Import your JSON file here</label>\n                                                        <input type=\"file\" className=\"form-control\" id=\"create-import_file\" accept=\".json\" />\n                                                    </div>\n                                                </div>\n                                            )}\n\n                                        </div>\n                                    </div>\n                                    <div className=\"modal-footer\">\n                                        <a href=\"#\" className=\"btn btn-link link-secondary\" data-bs-dismiss=\"modal\">\n                                            Cancel\n                                        </a>\n                                        <a href=\"#\" className=\"btn btn-primary ms-auto\" id=\"btn-create-fragment\" onClick={(e) => this.handleStartCanvas()}>{this.state.loadingGeneratedResults}</a>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {this.state.results.length >= 1 ? (<div class=\"position-relative\">\n                    <div class=\"position-absolute bottom-0 end-0 me-4 mb-4\">\n                        <button className=\"btn btn-lg btn-secondary rounded-pill\" onClick={e => this.handleEndCanvas()}><i class=\"bi bi-x-lg me-2\"></i> End this session</button>\n                    </div>\n                </div>) : null}\n\n\n            </PanelLayout>\n        )\n    }\n}\n\n// function generateCanvas() {\n//     let psudoRow = document.querySelector('.pseudo-row')\n\n//     if (psudoRow != null) {\n//         psudoRow.addEventListener('click', function (e) {\n//             psudoRow.classList.add('active')\n//         })\n//     }\n\n//     let previewFragment = document.querySelector('#fragment-preview')\n//     let btnCreateFragment = document.querySelector('#btn-create-fragment')\n\n//     let formJSON = {\n//         elements: [\n//             {\n//                 label: 'Nama lengkap',\n//                 tag: 'input',\n//                 attributes: {\n//                     type: 'text',\n//                     class: 'form-control',\n//                     id: 'add-nama',\n//                     name: 'nama',\n//                     placeholder: 'Nama lengkap...',\n//                     disabled: false,\n//                     readonly: false,\n//                     autofocus: true\n//                 }\n//             },\n//             {\n//                 label: 'Alamat email',\n//                 tag: 'input',\n//                 attributes: {\n//                     type: 'email',\n//                     class: 'form-control',\n//                     id: 'add-email',\n//                     name: 'email',\n//                     placeholder: 'Email valid...',\n//                     disabled: false,\n//                     readonly: false,\n//                     autofocus: false\n//                 }\n//             },\n//             {\n//                 label: 'Password',\n//                 tag: 'input',\n//                 attributes: {\n//                     type: 'password',\n//                     class: 'form-control',\n//                     id: 'add-password',\n//                     name: 'password',\n//                     placeholder: 'Password...',\n//                     disabled: true,\n//                     readonly: true,\n//                     autofocus: false\n//                 }\n//             },\n//             // {\n//             //     label: 'Foto',\n//             //     tag: 'input',\n//             //     attributes: {\n//             //         type: 'file',\n//             //         class: 'form-control',\n//             //         id: 'add-file',\n//             //         name: 'file'\n//             //     }\n//             // },\n//             {\n//                 label: 'Jenis kelamin',\n//                 tag: 'select',\n//                 options: [\n//                     {\n//                         label: 'Pilih jenis kelamin',\n//                         value: '',\n//                         selected: true,\n//                         disabled: true\n//                     },\n//                     {\n//                         label: 'Laki-laki',\n//                         value: 'male',\n//                     },\n//                     {\n//                         label: 'Perempuan',\n//                         value: 'female'\n//                     },\n//                 ],\n//                 attributes: {\n//                     class: 'form-select',\n//                     id: 'add-jenis_kelamin',\n//                     name: 'jenis_kelamin',\n//                     disabled: false,\n//                     readonly: false,\n//                 }\n//             },\n//         ]\n//     }\n\n//     btnCreateFragment.addEventListener('click', () => {\n\n//         let cardTemplater = function (element) {\n//             return `<div className=\"card\">\n//                                         <div className=\"card-body\">\n//                                             ${element}\n//                                         </div>\n//                                     </div>`\n//         }\n\n//         let piece = ''\n//         let explodingToColumn = 12 / formJSON.elements.length\n\n//         if (formJSON.elements.length > 1) {\n//             piece += '<div className=\"row pseudo-row\">'\n//             piece += '<div className=\"pseudo-row-button\" style=\"display: none;\"><button className=\"btn btn-sm btn-primary\">Tambah</button> <button className=\"btn btn-sm btn-info\">Edit</button> <button className=\"btn btn-sm btn-danger\">Hapus</button></div> <br><br>'\n//         }\n\n//         formJSON.elements.forEach(elm => {\n//             piece += `<div className=\"form-group ${formJSON.elements.length > 1 ? '' : 'pseudo-row'} ${formJSON.elements.length > 1 ? 'col-md-' + explodingToColumn : ''} mb-3\">`\n//             piece += `<label className=\"mb-1\" for=\"${elm.attributes.id}\">${elm.label}</label>`\n\n//             if (elm.tag != 'select') {\n//                 piece += `<${elm.tag}`\n//                 piece += ` ${elm.attributes.type} `\n\n//                 for (const key in elm.attributes) {\n//                     if (elm.attributes.hasOwnProperty(key)) {\n//                         if ((typeof elm.attributes[key]) != \"boolean\") {\n//                             piece += ` ${key}=\"${elm.attributes[key]}\"`\n//                         } else {\n//                             if (elm.attributes[key]) {\n//                                 piece += ` ${key}=\"${elm.attributes[key]}\"`\n//                             } else {\n//                                 piece += ``\n//                             }\n//                         }\n//                     }\n//                 }\n\n//                 piece += `>`\n//             } else {\n//                 piece += `<${elm.tag}`\n//                 for (const key in elm.attributes) {\n//                     if (elm.attributes.hasOwnProperty(key)) {\n//                         if ((typeof elm.attributes[key]) != \"boolean\") {\n//                             piece += ` ${key}=\"${elm.attributes[key]}\"`\n//                         } else {\n//                             if (elm.attributes[key]) {\n//                                 piece += ` ${key}=\"${elm.attributes[key]}\"`\n//                             } else {\n//                                 piece += ``\n//                             }\n//                         }\n//                     }\n//                 }\n//                 piece += `>`\n\n//                 // option generate\n//                 let options = ''\n//                 elm.options.forEach(opt => {\n//                     let option = `<option value=\"${opt.value}\" ${opt.hasOwnProperty('selected') ? 'selected' : ''} ${opt.hasOwnProperty('disabled') ? 'disabled' : ''}>${opt.label}</option>`\n\n//                     // for (const key in opt) {\n//                     //     if (opt.hasOwnProperty(key)) {\n//                     //         option += ` value=\"${opt.value}\"`\n//                     //         option += ` ${key}=\"${opt[key]}\"`\n//                     //     }\n//                     // }\n\n//                     options += option\n//                 })\n\n//                 piece += options\n//                 piece += `</${elm.tag}>`\n//             }\n\n//             piece += '</div>'\n\n//             // piece += `<button className=\"btn btn-outline-primary\">+ Tambah element</button>`\n//         })\n\n//         if (formJSON.elements.length > 1) {\n//             piece += '</div>'\n\n//             // piece += `<button className=\"btn btn-outline-primary\">+ Tambah element</button>`\n//         }\n//         previewFragment.innerHTML += cardTemplater(piece)\n//         // previewFragment.insertAdjacentHTML('beforeend', `<button className=\"btn btn-outline-primary\">+ Tambah element</button>`)\n//         document.querySelector('.card-body').insertAdjacentHTML('afterbegin', `<div className=\"row p-3\"><button className=\"btn btn-outline-dark\">+ Tambah element</button></row>`)\n//         document.querySelector('.card-body').insertAdjacentHTML('beforeend', `<div className=\"row p-3\"><button className=\"btn btn-outline-dark\">+ Tambah element</button></row>`)\n//         // document.querySelector('.card-body').innerHTML += `<button className=\"btn btn-sm btn-primary ms-3\">+ Tambah element</button>`\n\n//         // previewFragment.innerHTML += cardTemplater(`\n//         // <div className=\"mb-3\">\n//         //                   <label className=\"form-label\">Text</label>\n//         //                   <input type=\"text\" className=\"form-control\" name=\"example-text-input\" placeholder=\"Input placeholder\">\n//         //                 </div>\n//         // `)\n\n//         // previewFragment.innerHTML += `<h1>${new Date()}</h1>`\n\n//         psudoRow = document.querySelector('.pseudo-row')\n//         psudoRow.addEventListener('click', function (e) {\n//             psudoRow.classList.add('active')\n//         })\n\n//         document.getElementsByClassName('pseudo-row')[0].addEventListener('mouseenter', function () {\n//             document.getElementsByClassName('pseudo-row-button')[0].style.display = \"block\"\n//         })\n\n//         document.getElementsByClassName('pseudo-row')[0].addEventListener('mouseleave', function () {\n//             document.getElementsByClassName('pseudo-row-button')[0].style.display = \"none\"\n//         })\n//     })\n\n//     // btn-add-input\n\n//     // setTimeout(() => {\n//     //     [].forEach.call(document.getElementsByClassName('pseudo-row-button'), function (el) {\n//     //         el.style.display = 'none';\n//     //     });\n//     // }, 5000);\n\n\n// }\n\nexport default ProjectCanvas;\n\n"],"names":["initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","PanelLayout","props","_jsx","children","_jsxs","class","type","href","src","width","height","alt","target","rel","xmlns","viewBox","stroke","fill","d","title","tabindex","style","id","role","ProjectCanvas","Component","constructor","super","copyCode","code","className","onClick","e","copy","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","alert","this","state","errorMessage","isLoadingGeneratedResults","loadingGeneratedResults","results","projectCanvas","createProjectFrom","blueprintFormHtmlString","handleImportProjectTemplate","bind","handleStartCanvas","renderCanvasFromState","undefined","blueprints","blueprintForm","totalRow","length","generateX","elm","dynamicAttributes","key","attributes","hasOwnProperty","tag","options","map","opt","label","blp","explodingToColumn","Math","round","display","for","index","name","generatePureHtmlFromState","crudType","inputs","flat","generateModal","headerTitle","footerTitle","buttonStyle","modalHtmlString","ReactDOMServer","setState","prevState","fileName","description","language","indexHtmlString","generateIndexPage","finalResult","generateColumn","result","input","orderable","generateScript","datatable","generateLogicFromState","generateValidation","fieldAssignRules","validation","rules","mainLogic","hasFileExist","storePath","hasFile","titleProject","generateIndex","generateDatatables","toLowerCase","uploadFile","generateCreateData","deleteFile","generateUpdateData","generateFilename","platform","componentDidMount","fragmentMakeMeAwesome","console","log","sendDatAnalytic","sourceTemplate","fragmentGeneratingResult","setTimeout","querySelector","value","JSON","parse","error","message","click","getElementById","files","reader","FileReader","readAsText","onload","onerror","handleEndCanvas","window","confirm","resetCanvas","reset","renderFinalResults","piece","htmlFor","SyntaxHighlighter","solarizedlight","showLineNumbers","typePattern","text","render","_Fragment","strokeWidth","strokeLinecap","strokeLinejoin","tabIndex","SampleProjectCanvasTemplateJson","download","rows","accept"],"sourceRoot":""}